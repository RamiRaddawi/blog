{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://127.0.0.1:3000/author/\";\n  }\n  register(author) {\n    console.log(this.url + 'register');\n    return this.http.post(this.url + 'register', author);\n  }\n  login(author) {\n    console.log(this.url + 'login');\n    return this.http.post(this.url + 'login', author);\n  }\n  isLoggedIn() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getAuthorDataFromToken() {\n    let token = localStorage.getItem('token');\n    console.log(token);\n    if (token) {\n      let data = JSON.parse(window.atob(token.split('.')[1]));\n      console.log(data);\n      return data;\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","http","url","register","author","console","log","post","login","isLoggedIn","token","localStorage","getItem","getAuthorDataFromToken","data","JSON","parse","window","atob","split","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\DEV\\blog\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n url=\"http://127.0.0.1:3000/author/\";\n  constructor(private http:HttpClient) {\n\n   }\n\nregister(author:any){\n  console.log(this.url+'register');\n return this.http.post(this.url+'register',author);\n}\nlogin(author:any){\n  console.log(this.url+'login');\n return this.http.post(this.url+'login',author);\n}\nisLoggedIn(){\n  let token = localStorage.getItem('token');\n  if(token){\n    return true;\n  }else { \n    return false;\n  }\n}\n\ngetAuthorDataFromToken(){\n  let token = localStorage.getItem('token');\n  console.log(token);\n  \n  if(token){\n    let data = JSON.parse(window.atob(token.split('.')[1]));\n    console.log(data);\n    return data;\n  }\n}\n}\n"],"mappings":";;AAGA,MAGaA,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADzB,KAAAC,GAAG,GAAC,+BAA+B;EAGjC;EAEHC,QAAQA,CAACC,MAAU;IACjBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,GAAG,GAAC,UAAU,CAAC;IACjC,OAAO,IAAI,CAACD,IAAI,CAACM,IAAI,CAAC,IAAI,CAACL,GAAG,GAAC,UAAU,EAACE,MAAM,CAAC;EAClD;EACAI,KAAKA,CAACJ,MAAU;IACdC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,GAAG,GAAC,OAAO,CAAC;IAC9B,OAAO,IAAI,CAACD,IAAI,CAACM,IAAI,CAAC,IAAI,CAACL,GAAG,GAAC,OAAO,EAACE,MAAM,CAAC;EAC/C;EACAK,UAAUA,CAAA;IACR,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAGF,KAAK,EAAC;MACP,OAAO,IAAI;KACZ,MAAK;MACJ,OAAO,KAAK;;EAEhB;EAEAG,sBAAsBA,CAAA;IACpB,IAAIH,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzCP,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;IAElB,IAAGA,KAAK,EAAC;MACP,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvDd,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;MACjB,OAAOA,IAAI;;EAEf;;AAhCaf,WAAW,C;mBAAXA,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXxB,WAAW,C;SAAXA,WAAW;EAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEP3B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}